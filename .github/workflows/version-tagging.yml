name: Version Tagging and Release

on:
  push:
    branches: [ main ]
    paths:
      - 'VERSION'

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for release notes

      - name: Read and validate VERSION file
        id: version
        run: |
          # Read VERSION file
          if [ ! -f VERSION ]; then
            echo "❌ VERSION file not found"
            exit 1
          fi

          VERSION=$(cat VERSION | tr -d '[:space:]')

          if [ -z "$VERSION" ]; then
            echo "❌ VERSION file is empty"
            exit 1
          fi

          # Validate semantic version format (MAJOR.MINOR.PATCH or MAJOR.MINOR.PATCH-prerelease)
          if ! echo "$VERSION" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.]+)?$'; then
            echo "❌ Invalid version format: $VERSION"
            echo "   Expected: MAJOR.MINOR.PATCH (e.g., 1.0.0, 2.1.3, 1.0.0-beta.1)"
            exit 1
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Version from file: $VERSION"

      - name: Check if tag exists
        id: check_tag
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "⚠️  Tag v$VERSION already exists - skipping release creation"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "✅ Tag v$VERSION will be created"
          fi

      - name: Generate release notes
        id: release_notes
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          # Get the previous tag (if exists)
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          echo "📝 Generating release notes..."

          if [ -z "$PREVIOUS_TAG" ]; then
            echo "   First release - including all commits"
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            echo "   Changes since $PREVIOUS_TAG"
            COMMITS=$(git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi

          # Create release notes file
          cat > release_notes.md << EOF
          ## Release v$VERSION

          $(if [ -z "$PREVIOUS_TAG" ]; then echo "Initial release of React Gallery"; else echo "Changes since $PREVIOUS_TAG"; fi)

          ### Changes
          $COMMITS

          ### Deployment
          This version is automatically deployed via GitHub Actions.

          ### Docker Images
          - \`latest\`
          - \`$VERSION-${GITHUB_SHA:0:7}\`
          - \`${GITHUB_SHA:0:7}\`

          ### Links
          - [Docker Hub](https://hub.docker.com/r/\${DOCKERHUB_USER}/demo-gallery)
          - [Deployment Workflow](https://github.com/${{ github.repository }}/actions/workflows/deploy.yml)
          EOF

          echo "✅ Release notes generated"

      - name: Create and push tag
        if: steps.check_tag.outputs.exists == 'false'
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Create annotated tag
          git tag -a "v$VERSION" -m "Release v$VERSION"

          # Push tag
          git push origin "v$VERSION"

          echo "🏷️  Created and pushed tag v$VERSION"

      - name: Create GitHub Release
        if: steps.check_tag.outputs.exists == 'false'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          # Create release with generated notes
          gh release create "v$VERSION" \
            --title "Release v$VERSION" \
            --notes-file release_notes.md \
            --latest

          echo "✅ Created GitHub Release v$VERSION"
          echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/v$VERSION"

      - name: Release Summary
        if: always()
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          echo "================================"
          echo "Release Summary"
          echo "================================"
          echo "Version: $VERSION"
          echo "Tag: v$VERSION"

          if [ "${{ steps.check_tag.outputs.exists }}" == "true" ]; then
            echo "Status: ⚠️  Tag already exists - skipped"
          else
            echo "Status: ✅ Release created successfully"
            echo "Release: https://github.com/${{ github.repository }}/releases/tag/v$VERSION"
          fi

          echo "================================"
