version: 2.1

# Orbs for additional functionality
orbs:
  node: circleci/node@5.1.0
  docker: circleci/docker@2.2.0

# Reusable executors
executors:
  node-executor:
    docker:
      - image: cimg/node:20.9.0
    working_directory: ~/repo
  
  docker-executor:
    docker:
      - image: cimg/base:stable
    working_directory: ~/repo

# Reusable commands
commands:
  install-tailscale:
    description: "Install and configure Tailscale"
    steps:
      - run:
          name: Install Tailscale
          command: |
            curl -fsSL https://tailscale.com/install.sh | sh
      
      - run:
          name: Start Tailscale with OAuth
          command: |
            sudo tailscaled --tun=userspace-networking --socks5-server=localhost:1055 --outbound-http-proxy-listen=localhost:1055 &
            sleep 5
            
            # Authenticate with OAuth
            sudo -E tailscale up \
              --authkey="${TAILSCALE_AUTHKEY}" \
              --hostname="circleci-${CIRCLE_BUILD_NUM}" \
              --accept-routes \
              --accept-dns=false
            
            # Wait for connection
            sleep 10
            tailscale status

# Jobs
jobs:
  test-and-build:
    executor: node-executor
    steps:
      - checkout
      
      - node/install-packages:
          pkg-manager: yarn
          cache-path: ~/.cache/yarn
      
      - run:
          name: Run linter
          command: yarn lint
      
      - run:
          name: Build application
          command: |
            # Use placeholder values for build
            export VITE_API_URL="__VITE_API_URL__"
            export VITE_API_KEY="__VITE_API_KEY__"
            export VITE_AUTH_USERNAME="__VITE_AUTH_USERNAME__"
            export VITE_AUTH_PASSWORD="__VITE_AUTH_PASSWORD__"
            export VITE_ENVIRONMENT="__VITE_ENVIRONMENT__"
            export VITE_DATADOG_APPLICATION_ID="__VITE_DATADOG_APPLICATION_ID__"
            export VITE_DATADOG_CLIENT_TOKEN="__VITE_DATADOG_CLIENT_TOKEN__"
            export VITE_DATADOG_SITE="__VITE_DATADOG_SITE__"
            export VITE_DATADOG_SERVICE="__VITE_DATADOG_SERVICE__"
            export VITE_RELEASE="__VITE_RELEASE__"
            
            yarn build
      
      - persist_to_workspace:
          root: .
          paths:
            - dist
            - docker
            - Dockerfile
            - .dockerignore
            - package.json
            - yarn.lock

  build-docker:
    executor: docker-executor
    steps:
      - checkout
      
      - attach_workspace:
          at: .
      
      - setup_remote_docker:
          docker_layer_caching: true
      
      - run:
          name: Build Docker image
          command: |
            # Set image tag
            if [ "${CIRCLE_BRANCH}" = "main" ]; then
              IMAGE_TAG="latest"
            else
              IMAGE_TAG="${CIRCLE_BRANCH}-${CIRCLE_SHA1:0:7}"
            fi
            
            echo "Building image: ${DOCKER_USERNAME}/${CONTAINER_NAME}:${IMAGE_TAG}"
            
            docker build \
              -t "${DOCKER_USERNAME}/${CONTAINER_NAME}:${IMAGE_TAG}" \
              -t "${DOCKER_USERNAME}/${CONTAINER_NAME}:${CIRCLE_SHA1:0:7}" \
              .
      
      - run:
          name: Push to Docker Hub
          command: |
            echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin
            
            if [ "${CIRCLE_BRANCH}" = "main" ]; then
              IMAGE_TAG="latest"
            else
              IMAGE_TAG="${CIRCLE_BRANCH}-${CIRCLE_SHA1:0:7}"
            fi
            
            docker push "${DOCKER_USERNAME}/${CONTAINER_NAME}:${IMAGE_TAG}"
            docker push "${DOCKER_USERNAME}/${CONTAINER_NAME}:${CIRCLE_SHA1:0:7}"

  deploy-to-server:
    executor: docker-executor
    steps:
      - checkout
      
      - attach_workspace:
          at: .
      
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -y openssh-client curl
      
      - run:
          name: Setup Tailscale with OAuth
          command: |
            # Install Tailscale
            curl -fsSL https://tailscale.com/install.sh | sh
            
            # Start Tailscale daemon
            sudo tailscaled --tun=userspace-networking --socks5-server=localhost:1055 &
            sleep 5
            
            # Create auth key from OAuth credentials
            AUTH_RESPONSE=$(curl -s -X POST \
              -H "Content-Type: application/x-www-form-urlencoded" \
              -d "client_id=${TAILSCALE_OAUTH_CLIENT_ID}" \
              -d "client_secret=${TAILSCALE_OAUTH_CLIENT_SECRET}" \
              "https://api.tailscale.com/api/v2/oauth/token")
            
            ACCESS_TOKEN=$(echo $AUTH_RESPONSE | grep -o '"access_token":"[^"]*' | cut -d'"' -f4)
            
            # Create ephemeral auth key
            AUTHKEY_RESPONSE=$(curl -s -X POST \
              -H "Authorization: Bearer ${ACCESS_TOKEN}" \
              -H "Content-Type: application/json" \
              -d '{
                "capabilities": {
                  "devices": {
                    "create": {
                      "reusable": false,
                      "ephemeral": true,
                      "tags": ["tag:ci"]
                    }
                  }
                },
                "expirySeconds": 300
              }' \
              "https://api.tailscale.com/api/v2/tailnet/-/keys")
            
            TAILSCALE_AUTHKEY=$(echo $AUTHKEY_RESPONSE | grep -o '"key":"[^"]*' | cut -d'"' -f4)
            
            # Connect to Tailscale
            sudo -E tailscale up \
              --authkey="${TAILSCALE_AUTHKEY}" \
              --hostname="circleci-deploy-${CIRCLE_BUILD_NUM}" \
              --accept-routes
            
            # Wait for connection
            sleep 10
            tailscale status
      
      - run:
          name: Configure SSH
          command: |
            mkdir -p ~/.ssh
            echo "${SSH_PRIVATE_KEY}" | base64 -d > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            
            # Disable strict host key checking for Tailscale network
            cat >> ~/.ssh/config <<EOF
            Host ${DEPLOY_HOST}
              StrictHostKeyChecking no
              UserKnownHostsFile=/dev/null
              User ${DEPLOY_USER}
              IdentityFile ~/.ssh/id_rsa
            EOF
      
      - run:
          name: Deploy to server
          command: |
            # Set image tag
            if [ "${CIRCLE_BRANCH}" = "main" ]; then
              IMAGE_TAG="latest"
            else
              IMAGE_TAG="${CIRCLE_BRANCH}-${CIRCLE_SHA1:0:7}"
            fi
            
            # Create deployment script
            cat > deploy_remote.sh <<'SCRIPT'
            #!/bin/bash
            set -e
            
            echo "Deploying ${CONTAINER_NAME}..."
            
            # Pull the latest image
            docker pull "${DOCKER_USERNAME}/${CONTAINER_NAME}:${IMAGE_TAG}"
            
            # Stop and remove existing container if it exists
            docker stop "${CONTAINER_NAME}" 2>/dev/null || true
            docker rm "${CONTAINER_NAME}" 2>/dev/null || true
            
            # Run new container with environment variables
            docker run -d \
              --name "${CONTAINER_NAME}" \
              --restart unless-stopped \
              -p "${CONTAINER_PORT}:80" \
              -e "VITE_API_URL=${VITE_API_URL}" \
              -e "VITE_API_KEY=${VITE_API_KEY}" \
              -e "VITE_AUTH_USERNAME=${VITE_AUTH_USERNAME}" \
              -e "VITE_AUTH_PASSWORD=${VITE_AUTH_PASSWORD}" \
              -e "VITE_ENVIRONMENT=${VITE_ENVIRONMENT}" \
              -e "VITE_DATADOG_APPLICATION_ID=${VITE_DATADOG_APPLICATION_ID}" \
              -e "VITE_DATADOG_CLIENT_TOKEN=${VITE_DATADOG_CLIENT_TOKEN}" \
              -e "VITE_DATADOG_SITE=${VITE_DATADOG_SITE}" \
              -e "VITE_DATADOG_SERVICE=${VITE_DATADOG_SERVICE}" \
              -e "VITE_RELEASE=${VITE_RELEASE}" \
              --label "traefik.enable=true" \
              --label "traefik.http.routers.${CONTAINER_NAME}.rule=Host(\`${TRAEFIK_HOST}\`)" \
              --label "traefik.http.services.${CONTAINER_NAME}.loadbalancer.server.port=80" \
              "${DOCKER_USERNAME}/${CONTAINER_NAME}:${IMAGE_TAG}"
            
            # Wait for container to be healthy
            echo "Waiting for container to be healthy..."
            for i in {1..30}; do
              if docker exec "${CONTAINER_NAME}" wget -q -O /dev/null http://127.0.0.1/health; then
                echo "Container is healthy!"
                break
              fi
              echo "Waiting... ($i/30)"
              sleep 2
            done
            
            # Show container status
            docker ps | grep "${CONTAINER_NAME}"
            echo "Deployment complete!"
            SCRIPT
            
            # Copy and execute deployment script
            scp deploy_remote.sh "${DEPLOY_USER}@${DEPLOY_HOST}:/tmp/"
            
            ssh "${DEPLOY_USER}@${DEPLOY_HOST}" \
              "IMAGE_TAG='${IMAGE_TAG}' \
               DOCKER_USERNAME='${DOCKER_USERNAME}' \
               CONTAINER_NAME='${CONTAINER_NAME}' \
               CONTAINER_PORT='${CONTAINER_PORT}' \
               VITE_API_URL='${VITE_API_URL}' \
               VITE_API_KEY='${VITE_API_KEY}' \
               VITE_AUTH_USERNAME='${VITE_AUTH_USERNAME}' \
               VITE_AUTH_PASSWORD='${VITE_AUTH_PASSWORD}' \
               VITE_ENVIRONMENT='${VITE_ENVIRONMENT}' \
               VITE_DATADOG_APPLICATION_ID='${VITE_DATADOG_APPLICATION_ID}' \
               VITE_DATADOG_CLIENT_TOKEN='${VITE_DATADOG_CLIENT_TOKEN}' \
               VITE_DATADOG_SITE='${VITE_DATADOG_SITE}' \
               VITE_DATADOG_SERVICE='${VITE_DATADOG_SERVICE}' \
               VITE_RELEASE='${VITE_RELEASE}' \
               TRAEFIK_HOST='${TRAEFIK_HOST}' \
               bash /tmp/deploy_remote.sh"
      
      - run:
          name: Cleanup Tailscale
          when: always
          command: |
            sudo tailscale logout || true
            sudo tailscale down || true

# Workflows
workflows:
  version: 2
  
  build-and-deploy:
    jobs:
      - test-and-build:
          context:
            - docker-hub
            - app-config
      
      - build-docker:
          requires:
            - test-and-build
          context:
            - docker-hub
            - app-config
          filters:
            branches:
              only:
                - main
                - develop
                - /release\/.*/
      
      - hold-for-approval:
          type: approval
          requires:
            - build-docker
          filters:
            branches:
              only: main
      
      - deploy-to-server:
          requires:
            - hold-for-approval
          context:
            - docker-hub
            - tailscale
            - deployment
            - app-config
          filters:
            branches:
              only: main

  # Automated deployment for develop branch (without approval)
  deploy-develop:
    jobs:
      - test-and-build:
          context:
            - docker-hub
            - app-config
          filters:
            branches:
              only: develop
      
      - build-docker:
          requires:
            - test-and-build
          context:
            - docker-hub
            - app-config
          filters:
            branches:
              only: develop
      
      - deploy-to-server:
          requires:
            - build-docker
          context:
            - docker-hub
            - tailscale
            - deployment-dev
            - app-config-dev
          filters:
            branches:
              only: develop
